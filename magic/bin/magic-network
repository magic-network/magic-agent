#!/usr/bin/env python

# magic_network - command line interface (CLI) for connecting to the Magic Network
#
# Author: Magic Foundation <support@hologram.io>
#
# Copyright 2018 - Magic Foundation
#
#
# LICENSE: Distributed under the terms of the MIT License

import argparse
import logging
import os
from configparser import ConfigParser

from magic.exceptions.magic_error import MagicError
from magic.gateway.magic import MagicGateway

config = ConfigParser()

# ---- Command Descriptions --------- #
help_version = 'Get agent version.'
help_gateway = 'Gateway provider agent commands.'
help_gateway_start = 'Start provider gateway server.'
help_payment = 'Payment enabler agent commands.'
help_payment_start = 'Start payment enabler server.'


# --------- Connect args ----------- #

def gateway_start():
    mg = MagicGateway()
    mg.run()

def payment_start():
    # pe = PaymentEnabler()
    # pe.run()
    pass

def parse_magic_gateway_args(parser):
    """
    Parse arguments taken in connecting to the magic gateway

    :param parser: a subparser object
    :return:
    """

    subparsers = parser.add_subparsers(title='subcommands')

    parser_gateway = subparsers.add_parser('version', help=help_version)
    parser_gateway.set_defaults(command_selected='version')

    parser_gateway = subparsers.add_parser('start', help=help_gateway_start)
    parser_gateway.set_defaults(command_selected='gateway_start')

def parse_magic_payment_args(parser):
    """
    Parse arguments taken in connecting to the magic gateway

    :param parser: a subparser object
    :return:
    """

    subparsers = parser.add_subparsers(title='subcommands')

    parser_payment = subparsers.add_parser('version', help=help_version)
    parser_payment.set_defaults(command_selected='version')

    parser_payment = subparsers.add_parser('start', help=help_payment_start)
    parser_payment.set_defaults(command_selected='payment_start')

# --------- Valid Commands --------- #

_command_handlers = {
    'gateway_start': gateway_start,
    'payment_start': payment_start
}

def parse_operations():

    """
    Parse incoming arguments from the command line
    :return: a dictionary of arguments
    """

    parser = argparse.ArgumentParser(description="CLI for connecting to the magic network")
    subparsers = parser.add_subparsers(title='subcommands', description='valid subcommands')

    # Parse connect subcommands
    parser_gateway = subparsers.add_parser('gateway', help=help_gateway)
    parse_magic_gateway_args(parser_gateway)

    parser_payment = subparsers.add_parser('payment', help=help_payment)
    parse_magic_payment_args(parser_payment)

    parser_version = subparsers.add_parser('version', help=help_version)
    parse_version(parser_version)

    return vars(parser.parse_args())

def parse_version(parser):
    parser.set_defaults(command_selected='version')

def run_version():
    verfile = os.path.dirname(__file__) + '/../../version.txt'
    version = open(verfile).read().split()[0]
    print(version)

def main():

    args = parse_operations()
    logger = logging.getLogger('')

    try:
        command_args = args['command_selected'].split('_')
    except KeyError as error:
        logger.error('Invalid agent command. For help: \n    magic-network -h')
        return

    if len(command_args) == 1:
        selected_command = command_args[0]
    else:
        selected_command = command_args[1]

    if selected_command == 'version':
        run_version()
    elif args['command_selected'] not in _command_handlers:
        logger.error('Internal script error - invalid command: %s ',
                     args['command_selected'])
    else:
        try:
            _command_handlers[args['command_selected']]()
        except MagicError as e:
            logger.error(str(e))


if __name__ == '__main__':
    main()
